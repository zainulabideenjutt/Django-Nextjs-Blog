// import Head from 'next/head'
// import Image from 'next/image'
// import styles from '../styles/Home.module.css'

// export default function Home() {
//   return (
//     <div className={styles.container}>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>

//       <main className={styles.main}>
//         <h1 className={styles.title}>
//           Welcome to <a href="https://nextjs.org">Next.js!</a>
//         </h1>

//         <p className={styles.description}>
//           Get started by editing{' '}
//           <code className={styles.code}>pages/index.js</code>
//         </p>

//         <div className={styles.grid}>
//           <a href="https://nextjs.org/docs" className={styles.card}>
//             <h2>Documentation &rarr;</h2>
//             <p>Find in-depth information about Next.js features and API.</p>
//           </a>

//           <a href="https://nextjs.org/learn" className={styles.card}>
//             <h2>Learn &rarr;</h2>
//             <p>Learn about Next.js in an interactive course with quizzes!</p>
//           </a>

//           <a
//             href="https://github.com/vercel/next.js/tree/canary/examples"
//             className={styles.card}
//           >
//             <h2>Examples &rarr;</h2>
//             <p>Discover and deploy boilerplate example Next.js projects.</p>
//           </a>

//           <a
//             href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             target="_blank"
//             rel="noopener noreferrer"
//             className={styles.card}
//           >
//             <h2>Deploy &rarr;</h2>
//             <p>
//               Instantly deploy your Next.js site to a public URL with Vercel.
//             </p>
//           </a>
//         </div>
//       </main>

//       <footer className={styles.footer}>
//         <a
//           href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//           target="_blank"
//           rel="noopener noreferrer"
//         >
//           Powered by{' '}
//           <span className={styles.logo}>
//             <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
//           </span>
//         </a>
//       </footer>
//     </div>
//   )
// }

import Link from 'next/link'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import axios from 'axios'
import React, { useState } from 'react'

const instance = axios.create({
  baseURL: 'http://127.0.0.1:8000/api',
  // timeout: 60 * 30
});

const Post = () => {
  const [author, setAuthor] = useState()
  const [featuredImage, setFeatueredImage] = useState()
  const [title, setTitle] = useState("")
  const [description, setDescription] = useState("")
  const [summary, setSummary] = useState("")
  const [views_count, setviews_count] = useState()
  const [categories, setCategories] = useState([])
  const [getCategories, setGetCategories] = useState([])
  const [users, setUsers] = useState([])
  const category = []
  React.useEffect(() => {
    const get_users = instance.get('/blogs/users').then((response) => {
      const data = response.data
      setUsers(data)
    }).catch((error) => {
      console.log(error.response)
    });

    const get_categories = instance.get('/blogs/categories').then((response) => {
      const data = response.data
      setGetCategories(data)
    }).catch((error) => {
      console.log(error.response)
    });
    // console.log(users)
    if (featuredImage) {
      console.log("featuredImage has been set.")
    }
  }, [featuredImage]);
  async function handleOptionsChange(e) {
    let options = e.target.options;
    let value = [];
    for (let i = 0; i < options.length; i++) {
      if (options[i].selected) {
        value.push(options[i].value)
      }
    }
    setCategories(value)
  }
  async function handleSubmitForm(e) {
    e.preventDefault();
    if (author && featuredImage && title && description && summary && views_count && categories) {
      let article = new FormData();
      // console.log(categories)
      article.append("author", author);
      article.append("featured_image", featuredImage);
      article.append('title', title);
      article.append('description', description);
      article.append('summary', summary);
      article.append('views_count', views_count);
      categories.forEach((category) => {
        article.append(`category`,category)
      });
      // article.append('category', categories);
      console.log(article)
      // const articles = {
      //   author,
      //   featuredImage:file,
      //   title,
      //   description,
      //   summary,
      //   views_count,
      //   category
      // };
      const res = await instance.post('/blogs/posts', article, {
        // "X-CSRFToken": csrfToken,
        'Content-Type': 'multipart/form-data',
      }
      ).then((response) => {
        console.log(response.data)
      }).catch((error) => {
        console.log(error.response.data)
      });
      // let axiosConfig = {
      //   headers: {
      //       'Content-Type': 'multipart/form-data',
      //   }
      // };
      // axios.post('http://127.0.0.1:8000/api/blogs/posts', axiosConfig,article)
      // .then((res) => {
      //   console.log("RESPONSE RECEIVED: ", res);
      // })
      // .catch((err) => {
      //   console.log("AXIOS ERROR: ", err);
      // })
    };

    // const article = {
    //     "author": author,
    //     "featured_image": featured_image,
    //     "title": title,
    //     "description": description,
    //     "summary": summary,
    //     "views_count": null,
    //     "category": []
    // };
    // axios.post('http://127.0.0.1:8000/api/blogs/posts', {
    //     Headers: {

    //     }
    // })
    //     .then(response => "Posted");
  }
  return (
    <>
      <div>
        <a href="category">Add Category</a>
        <br />
        <a href="category">Add Category</a>
        <br />
        <a href="comment">Add Comment</a>
      </div>
      <div>
        <form method="post" encType="multipart/form-data" onSubmit={handleSubmitForm}>
          <label htmlFor="author">author</label>
          <select onChange={(e)=>setAuthor(e.target.value)} name="user" id="cars">
          <option hidden>Select Author</option>
            {
              users.map((user) => {
                return <option key={user.username} value={user.id} >{user.username}</option>
              })
            }
          </select>
          {/* <input type="number" name='author' id="author" value={author ? author : ""} onChange={(e) => setAuthor(Number(e.target.value))} />
          <br /> */}
          <br />
          <label htmlFor="featured_image">featured_image</label>
          <input type="file" name="featured_image" id="featured_image"
            onChange={(e) => {
              setFeatueredImage(e.target.files[0])
            }}
          // value={
          //   ""
          //  } 
          />
          <br />
          <label htmlFor="title">title</label>
          <input type="text" name='title' id='title' value={title} onChange={(e) => setTitle(e.target.value)} />
          <br />
          <label htmlFor="description">description</label>
          <input type="text" name='description ' id='description' value={description} onChange={(e) => setDescription(e.target.value)} />
          <br />
          <label htmlFor="summary">summary</label>
          <input type="text" name='summary' id='summary' value={summary} onChange={(e) => setSummary(e.target.value)} />
          <br />
          <label htmlFor="views_count">views_count</label>
          <input type="number" name='views_count' id='views_count' value={views_count ? views_count : ""} onChange={(e) => setviews_count(Number(e.target.value))} />
          <br />
          {/* <label htmlFor="category">category</label>
          <input multiple type="text" name='category' id='category' value={category} onChange={(e) => {
            const value = e.target.value
            const categories = []
            setCategory(categories)
          }} /> */}
          <select name="category" id='category'
            value={categories}
            onChange={
              (e) => handleOptionsChange(e)
            } multiple>
            {
              getCategories.map((category) => {
                return <option key={category.id} value={category.id} >{category.name}</option>
              })
            }
          </select>
          <br />
          <button type='submit'>Submit</button>
        </form>
      </div>
    </>
  )

}
// {
//     "author": null,
//     "featured_image": null,
//     "title": "",
//     "description": "",
//     "summary": "",
//     "views_count": null,
//     "category": []
// }
export default Post 
